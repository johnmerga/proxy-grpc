syntax = "proto3";
package poker;
import "google/protobuf/empty.proto";

service Sng{
    rpc Test(google.protobuf.Empty) returns (google.protobuf.Empty) {}
    
    rpc GetStatus (GetStatusRequest) returns (GetStatusResult) {}
    rpc MakeSng (MakeSngRequest) returns (MakeSngResponse) {}
    rpc MakePlayerAction (MakePlayerActionRequest) returns (GetStatusResult) {}
    
    /**
     * Tournament Services
     */
    rpc getTournaments(GetTournamentsRequest) returns (GetTournamentsResponse) {}
    rpc joinTournament(JoinTournamentRequest) returns (JoinTournamentResponse) {}
    rpc unregisterTournament(UnregisterTournamentRequest) returns (UnregisterTournamentResponse) {}
    rpc cancelTournament(CancelTournamentRequest) returns (CancelTournamentResponse) {}

    rpc getGameplayHistories(GetGameplayHistoriesRequest) returns (GetGameplayHistoriesResponse) {}
    rpc getAllHandHistoryData(GetHandHistoryRequest) returns (GetHandHistoryResponse) {}
    rpc getHandHistoryStat(GetHandHistoryRequest) returns (GetHandHistoryResponse) {}
    rpc getSingleHandHistoryStat(GetHandHistoryRequest) returns (GetHandHistoryResponse) {}

    rpc getHandHistoryData(GetHandHistoryRequest) returns (GetHandHistoryResponse) {}
    rpc drawReplaceAction(DrawReplaceActionRequest) returns (GetStatusResult) {}
    rpc drawAddAction(DrawAddActionRequest) returns (GetStatusResult) {}

    rpc joinTournamentTempalte(JoinTournamentTemplateRequest) returns (JoinTournamentTemplateResponse) {}
    rpc getTournamentTemplateDetail(GetTournamentTemplateDetailRequest) returns (GetTournamentTemplateDetailResponse) {}
    rpc addTournamentTemplateToLobby(AddTournamentTemplateToLobbyRequest) returns (AddTournamentTemplateToLobbyResponse) {}
    rpc removeTournamentTemplateFromLobby(RemoveTournamentTemplateFromLobbyRequest) returns (RemoveTournamentTemplateFromLobbyResponse) {}
    rpc createTournamentTemplate(CreateTournamentTemplateRequest) returns (CreateTournamentTemplateResponse) {}
    rpc getTournamentTemplateList(GetTournamentTemplateListRequest) returns (GetTournamentTemplateListResponse){}
    rpc getLobbyTournamentTemplateList(GetLobbyTournamentTemplateListRequest) returns (GetLobbyTournamentTemplateListResponse) {}
    rpc getTournamentTemplateBufferState(GetTournamentTemplateBufferStateRequest) returns (GetTournamentTemplateBufferStateResponse){}
    rpc unsubscribeFromTournamentTemplateBuffer(UnsubscribeFromTournamentTemplateBufferRequest) returns (UnsubscribeFromTournamentTemplateBufferResponse) {}

    rpc launchTournament(LaunchTournamentRequest) returns (LaunchTournamentResponse) {}
    rpc createMultipleUsers(CreateMultipleUsersRequest) returns (CreateMultipleUsersResult){}
    rpc Signup(SignupRequest) returns (SignupResult){}
    rpc Login(LoginRequest) returns (LoginResult) {}
    rpc Logout(LogoutRequest) returns (LogoutResult) {}
    rpc makeDeposit(MakeDepositRequest) returns (MakeDepositResponse) {}
    rpc makeWithdrawal(MakeWithdrawalRequest) returns (MakeWithdrawalResponse) {}
    rpc getAccountStatements(AccountStatementsRequest) returns (AccountStatementsResponse) {}
    rpc captureProcessedDeposit(CaptureDepositRequest) returns (CaptureDepositResponse) {}
    rpc captureProcessedWithdrawal(CaptureWithdrawalRequest) returns (CaptureWithdrawalResponse) {}
    rpc addPayoutStructure(AddPayoutStructureRequest) returns (AddPayoutStructureResponse) {}
    rpc getPayoutStructure(GetPayoutStructureRequest) returns (GetPayoutStructureResponse) {}
    rpc changePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {}

    // payment related grpc methods
    rpc getClientToken(ClientTokenRequest) returns (ClientTokenResponse) {}
    rpc vaultPaymentMethod(VaultPaymentMethodRequest) returns (VaultPaymentMethodResponse) {}

    rpc validateExperian(SignupRequest) returns (SignupResult) {}
    
    rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse) {}
    rpc MakeSngWithRandomUsers (MakeSngWithRandomUsersRequest) returns (GetStatusResult) {}

    rpc GetRankings (GetRankingsRequest) returns (GetRankingsResult) {}

    /* TODO:  Can't use until rr-grpc supports streaming responses */
    rpc TableSubscribe (TableSubscribeRequest) returns (stream TableSubscribeResponse) {}

    // send geolocation related data from client to server
    rpc sendGeolocationData(GeolocationRequest) returns (GeolocationResult) {}

    //search user by username
    rpc searchUserByUsername(SearchUserRequest) returns (SearchUserResult) {}

    rpc whitelistUser(WhitelistUserRequest) returns (WhitelistUserResult) {}

    rpc acceptTOS(AcceptTOSRequest) returns (AcceptTOSResult) {}

    rpc checkForUpdates(AccountUpdatesRequest) returns (AccountUpdatesResult) {}
    rpc getWhitelistedUsers(WhitelistedUsersRequest) returns (WhitelistedUsersResult) {}
    rpc removeWhitelistUser(WhitelistUserRequest) returns (WhitelistUserResult) {}

    rpc getTournamentDetails(TournamentDetailsRequest) returns (TournamentDetailsResponse) {}
    rpc getPlayerAccountBalance(PlayerAccountBalanceRequest) returns (PlayerAccountBalanceResult) {}
    rpc getNextTournament(NextTournamentRequest) returns (NextTournamentResult) {}

    rpc joinAnyTournament(JoinAnyTournamentRequest) returns (JoinAnyTournamentResult) {}
    rpc joinAnyTournamentAdmin(JoinAnyTournamentAdminRequest) returns (JoinAnyTournamentResult) {}
    rpc unregisterAnyTournament(UnregisterAnyTournamentRequest) returns (UnregisterAnyTournamentResult) {}
    rpc getJoinAnyTournamentStatus(JoinAnyTournamentStatusRequest) returns (JoinAnyTournamentStatusResult) {}
    rpc getActiveJoinAnyTournaments(ActiveJoinAnyTournamentsRequest) returns (ActiveJoinAnyTournamentsResult) {}
    rpc getJoinAnyUsersList(JoinAnyUsersListRequest) returns (JoinAnyUsersListResult) {}
    rpc cancelJoinAnyTournament(CancelJoinAnyTournamentRequest) returns (CancelJoinAnyTournamentResult) {}
    rpc cancelJoinAnyMultipleUsers(CancelJoinAnyUsersRequest) returns (CancelJoinAnyUsersResult) {}
    rpc cancelJoinAnyAllUsers(JoinAnyTournamentStatusRequest) returns (CancelJoinAnyUsersResult) {}
    rpc cancelTournaments(CancelTournamentsRequest) returns (CancelTournamentsResponse) {}
    rpc addonPlayer(AddonPlayerRequest) returns (AddonPlayerResponse) {}
    rpc setPrizeAsRevealed(PrizeRevealRequest) returns (PrizeRevealResponse) {}
    
    rpc getGeofenceData(GeofenceRequest) returns (GeofenceResponse) {}
    rpc addGeofenceData(GeofenceAddRequest) returns (GeofenceAddResponse) {}
    rpc updateGeofenceData(GeofenceUpdateRequest) returns (GeofenceUpdateResponse) {}
    rpc removeGeofenceData(GeofenceRemoveRequest) returns (GeofenceRemoveResponse) {}
    rpc whitelistUsersOnGeofence(GeofenceWhitelistRequest) returns (GeofenceWhitelistResponse) {}
    rpc blacklistUsersOnGeofence(GeofenceBlacklistRequest) returns (GeofenceBlacklistResponse) {}
    rpc whitelistClientsOnGeofence(GeofenceWhitelistRequest) returns (GeofenceWhitelistResponse) {}
    rpc blacklistClientsOnGeofence(GeofenceBlacklistRequest) returns (GeofenceBlacklistResponse) {}
    rpc getWhitelistedUsersonGeofence(GeofenceUsersRequest) returns (GeofenceUsersResponse) {}
    rpc getBlacklistedUsersonGeofence(GeofenceUsersRequest) returns (GeofenceUsersResponse) {}
    rpc setGeofenceGlobalRule(GeofenceGlobalRuleRequest) returns (GeofenceGlobalRuleResponse) {}
    rpc updatePlayerAccountBalance(UpdateAccountBalanceRequest) returns (UpdateAccountBalanceResponse) {}

    rpc getUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse) {}
    
    rpc getGlobalSettings(GlobalSettingsRequest) returns (GlobalSettingsResponse) {}
    rpc setGlobalSettings(GlobalSettingsRequest) returns (GlobalSettingsResponse) {}

    rpc updateUserInfo(UpdateUserInfoRequest) returns (UpdateUserInfoResponse) {}
    rpc getPasswordResetLink(GetPasswordResetLinkRequest) returns (GetPasswordResetLinkResponse) {}
    rpc fetchSecurityQuestions(FetchSecurityQuestionsRequest) returns (FetchSecurityQuestionsResponse) {}
    rpc resetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {}
    rpc verifyUserPassword(VerifyUserPasswordRequest) returns (VerifyUserPasswordResponse) {}
    
    rpc adminLogin(LoginRequest) returns (LoginResult) {}


    rpc rankHands(RankHandsRequest) returns (RankHandsResult){}

    rpc getShuffledDeck(NewDeckRequest) returns (NewDeckResponse){}

    rpc validateSecurityQuestionsForLogin(ValidateSecurityQuestionsRequest) returns (ValidateSecurityQuestionsResponse) {}

    rpc checkIsEmailAvailable(IsEmailAvailableRequest) returns (IsEmailAvailableResponse){}
    rpc startTournamentTableInstance(StartTournamentTableInstanceRequest) returns (StartTournamentTableInstanceResponse) {}

    rpc tournamentPayoutStructure(TournamentDetailsRequest) returns (TournamentPayoutStructureResponse) {}

    rpc getWhitelistedClientsonGeofence(GeofenceClientsRequest) returns (GeofenceClientsResponse) {}
    rpc getBlacklistedClientsonGeofence(GeofenceClientsRequest) returns (GeofenceClientsResponse) {}
    rpc setGeofenceClientGlobalRule(GeofenceClientGlobalRuleRequest) returns (GeofenceClientGlobalRuleResponse) {}
    rpc getClients(WhitelistedClientsRequest) returns (WhitelistedClientsResult) {}    
    
    rpc getActiveUsers(ActiveUsersRequest) returns (ActiveUsersResult) {}

    rpc getClientData(ClientRequest) returns (ClientResponse) {}
    rpc addClientData(ClientAddRequest) returns (ClientAddResponse) {}
    rpc updateClientData(ClientUpdateRequest) returns (ClientUpdateResponse) {}
    rpc removeClientData(ClientRemoveRequest) returns (ClientRemoveResponse) {}


    

    rpc getComponentPermissionData(ComponentPermissionRequest) returns (DataResponse) {}
    rpc addComponentPermissionData(ComponentPermissionAddRequest) returns (StatusResponse) {}
    rpc updateComponentPermissionData(ComponentPermissionUpdateRequest) returns (StatusResponse) {}
    rpc removeComponentPermissionData(ComponentPermissionRemoveRequest) returns (StatusResponse) {}

    rpc getAdminRoleData(AdminRoleRequest) returns (DataResponse) {}
    rpc addAdminRoleData(AdminRoleAddRequest) returns (StatusResponse) {}
    rpc updateAdminRoleData(AdminRoleUpdateRequest) returns (StatusResponse) {}
    rpc removeAdminRoleData(AdminRoleRemoveRequest) returns (StatusResponse) {}

    rpc getAdminRoles(AdminUpdateRequest) returns (DataResponse) {}

    rpc getDistinctRole(AdminRoleRequest) returns (DataResponse) {}
    rpc getAdmins(ActiveUsersRequest) returns (DataResponse) {}
    rpc addAdminData(AdminAddRequest) returns (StatusResponse) {}
    rpc updateAdminData(AdminUpdateRequest) returns (StatusResponse) {}
    rpc removeAdminData(AdminRemoveRequest) returns (StatusResponse) {}

    rpc getAmountInplay(google.protobuf.Empty) returns (FloatResponse) {}

    rpc removeTournament(GetTournamentTemplateDetailRequest) returns (StatusResponse) {}
    rpc updateTournament(UpdateTournamentTemplateRequest) returns (StatusResponse) {}

    rpc getPlayerTournaments(PlayerTournamentRequest) returns (GetTournamentsResponse) {}

    rpc testHandsWild(WildHandRequest) returns (WildHandResponse) {}
    rpc testCompareHandsWild(CompareWildHandRequest) returns (WildHandResponse) {}
    rpc simulateGames(SimulateGamesRequest) returns (StatusResponse) {}

    rpc getPendingRequest(PendingDepositRequest) returns (DataResponse) {}
    rpc getApprovedRequest(PendingDepositRequest) returns (DataResponse) {}
    rpc actionOnPendingRequest(UpdatePendingRequest) returns (StatusResponse) {}

    rpc getBotList(ActiveUsersRequest) returns (ActiveUsersResult) {}


    rpc deletePrizePoolPayout(DeletePrizePoolStatusRequest) returns (DeletePrizePoolStatusResponse){}

    rpc adminJoinAnyTournament(AdminJoinAnyTournamentRequest) returns (JoinAnyTournamentResult) {}

    rpc getUiSettings(UiSettingsRequest) returns (UiSettingsResponse) {}
    rpc getAllUiSettings(UiSettingsRequest) returns (UiSettingsResponse) {}
    rpc setUiSettings(AllUiSettingsRequest) returns (UiSettingsResponse) {}
    rpc deleteUiSettings(UiSettingsRequest) returns (UiSettingsResponse) {} 

    rpc getThemes(ThemesRequest) returns (ThemesResponse) {}
    rpc deleteTheme(ThemesRequest) returns (ThemesResponse) {}
    rpc setTheme(ThemesRequest) returns (ThemesResponse) {}
    rpc editTheme(EditThemesRequest) returns (ThemesResponse) {}
    rpc getGeopoll(GeopollRequest) returns (GeopollResponse) {}
    rpc purgeGeopoll(PurgeGeopollRequest) returns (PurgeGeopollResponse) {}

    rpc setTemplateEditor(TemplateEditorRequest) returns (TemplateEditorResponse) {}
    rpc getTemplateEditor(TemplateEditorRequest) returns (TemplateEditorResponse) {}

    rpc addPlayerMailingAddress(PlayerMailingAddressUpdateRequest) returns (PlayerMailingAddressStatusResponse) {}
    rpc getPlayerMailingAddress(PlayerMailingAddressRequest) returns (PlayerMailingAddressResponse) {}
    rpc getPlayerMailingAddresses(PlayerMailingAddressRequest) returns (PlayerMailingAddressesResponse) {}
    rpc updatePlayerMailingAddress(PlayerMailingAddressUpdateRequest) returns (PlayerMailingAddressStatusResponse) {}
    rpc getDefaultPlayerMailingAddress(PlayerMailingAddressRequest) returns (PlayerMailingAddressResponse) {}
    rpc setDefaultPlayerMailingAddress(PlayerMailingAddressRequest) returns (PlayerMailingAddressStatusResponse) {}
    rpc deletePlayerMailingAddress(PlayerMailingAddressRequest) returns (PlayerMailingAddressStatusResponse) {}
    rpc updateSecurityQuestions(UpdateSecurityQuestionsRequest) returns (UpdateSecurityQuestionsResponse) {} 
    rpc getUserSecurityQuestions(FetchSecurityQuestionsResponse) returns (FetchSecurityQuestionsResponse) {}
    rpc updateCustomCss(CustomCssRequest) returns (CustomCssResponse) {}
    rpc getCustomCss(CustomCssRequest) returns (CustomCssResponse) {}

    rpc getRandomSecurityQuestion(FetchSecurityQuestionsRequest) returns (FetchSecurityQuestionsResponse) {}
    rpc answerSecurityQusetionAndVerifyPassword(AnswerVerifyPasswordRequest) returns (AnswerVerifyPasswordResponse) {}
    rpc verifySSNLastFourDigits(VerifySSNLastFourRequest) returns (VerifySSNLastFourResponse) {}
    rpc uploadPageExtension(UploadPageExtensionRequest) returns (UploadPageExtensionResponse) {}
    rpc getPageExtensions(GetPageExtensionsRequest) returns (GetPageExtensionsResponse) {}
    rpc deletePageExtensions(DeletePageExtensionRequest) returns (DeletePageExtensionResponse) {}
    rpc extractPageExtensions(ExtractPageExtensionRequest) returns (ExtractPageExtensionResponse) {}
    rpc uploadWorksheetReport(UploadWorksheetReportRequest) returns (UploadWorksheetReportResponse) {}
    rpc getWorksheetsAndReports(GetWorksheetsAndReportsRequest) returns (GetWorksheetsAndReportsResponse) {}
    rpc changeDisplayNameForExtensions(ChangeDisplayNameForExtensionsRequest) returns (ChangeDisplayNameForExtensionsResponse) {}
    rpc changeDisplayNameForReports(ChangeDisplayNameForReportsRequest) returns (ChangeDisplayNameForReportsResponse) {}
    rpc changeStatusOfWorksheetReport(ChangeStatusOfWorksheetReportRequest) returns (ChangeStatusOfWorksheetReportResponse) {}
    rpc deleteWorksheetOrReport (DeleteWorksheetOrReportRequest) returns (DeleteWorksheetOrReportResponse) {}
    rpc addBraintreeCredential (ClientResponse) returns (ClientResponse) {}
    rpc clearTournamentBuffer (BufferRequest) returns (BufferResponse) {}
    rpc getAdjustmentRequest(AdjustmentRequest) returns (DataResponse) {}
    rpc getSessionsRequest(SessionsRequest) returns (DataResponse) {}
    rpc getDepositsRequest(DepositsRequest) returns (DataResponse) {}
    rpc getWithdrawalsRequest(WithdrawalsRequest) returns (DataResponse) {}
    rpc getPendingDepositsRequest(PendingDepositsRequest) returns (DataResponse) {}
    rpc getTransactionRequest(TransactionsRequest) returns (DataResponse) {}
    rpc getGamePlayStatusForUserPerTable(GamePlayStatusForUserPerTableRequest) returns (GamePlayStatusForUserPerTableResponse) {}
    rpc cancelAnySimulatedGames(CancelAnySimulatedGamesRequest) returns (CancelAnySimulatedGamesResponse) {}
    rpc getCancelTournamentList(GetCancelTournamentListRequest) returns (GetCancelTournamentListResponse) {}
    rpc getWithdrawalPending(GetWithdrawalPendingRequest) returns (GetWithdrawalPendingResponse) {}
    rpc withdrawCheckByMail(CheckWithdrawalRequest) returns (CheckWithdrawalResponse) {}
    rpc actionPendingWithdrawal(ActionPendingWithdrawaRequest) returns (ActionPendingWithdrawaResponse) {}
    rpc setLabelEditor(LabelEditorRequest) returns (LabelEditorResponse) {}
    rpc getLabelEditor(LabelEditorRequest) returns (LabelEditorResponse) {}
    rpc resetApiKey(ApiKeyRequest)returns (ApiKeyResponse) {}
    rpc getApiKey(ApiKeyRequest)returns (ApiKeyResponse) {}
    rpc addApiKey(ApiKeyRequest)returns (ApiKeyResponse) {}
    rpc removeApiKey(ApiKeyRequest)returns (ApiKeyResponse) {}
    rpc addRecuringDeposit(AddRecuringDepositRequest)returns (AddRecuringDepositResponse) {}
    rpc updateRecuringDeposit(UpdateRecuringDepositRequest)returns (UpdateRecuringDepositResponse) {}
    rpc toggleRecuringDeposit(ToggleRecuringDepositRequest)returns (ToggleRecuringDepositResponse) {}
    rpc getCustomerID(GetCustomerIDRequest)returns (GetCustomerIDResponse) {}
    rpc deletePaymentMethod(DeletePaymentMethodRequest)returns (DeletePaymentMethodResponse) {}
    rpc setDefaultPaymentMethod(SetDefaultPaymentMethodRequest)returns (SetDefaultPaymentMethodResponse) {}
    rpc confirmTransferAmounts(ConfirmTransferAmountsRequest)returns (ConfirmTransferAmountsResponse) {}
    rpc createPaymentMethod(MobilePaymentRequest) returns (MobilePaymentResponse){}
    rpc updatePaymentMethod(UpdatePaymentMethodRequest) returns (UpdatePaymentMethodResponse){}
    rpc makeTransaction(MakeTransactionRequest) returns (MakeTransactionResponse){}
    rpc getRecuringDeposit(GetRecuringDepositRequest)returns (GetRecuringDepositResponse) {}
    rpc uploadToS3(UploadToS3Request) returns (UploadToS3Response) {}
    rpc mountHashes(MountHashesRequest) returns (MountHashesResponse) {}

    rpc getGroupedClientData(GroupedClientRequest) returns (GroupedClientResponse) {}    
    rpc groupClientData(GroupClientAddRequest) returns (GroupClientAddResponse) {}
    rpc updateGroupedClientData(GroupedClientUpdateRequest) returns (GroupedClientUpdateResponse) {}
    rpc removeGroupedClientData(GroupedClientRemoveRequest) returns (GroupedClientRemoveResponse) {}
    rpc setReservationTimeEditor(SetReservationTimeEditorRequest) returns (SetReservationTimeEditorResponse) {}
    rpc getReservationTimeEditor(GetReservationTimeEditorRequest) returns (GetReservationTimeEditorResponse) {}
    rpc setTournamentReservationTime(SetTournamentReservationTimeRequest) returns (SetTournamentReservationTimeResponse) {}
    rpc removeTournamentReservationTime(RemoveTournamentReservationTimeRequest) returns (RemoveTournamentReservationTimeResponse) {}
    rpc getTournamentReservationTime(GetTournamentReservationTimeRequest) returns (GetTournamentReservationTimeResponse) {}
    rpc createTournamentReservationTimeDate(CreateTournamentReservationTimeRequest) returns (CreateTournamentReservationTimeResponse){}
    rpc isWithdrawAllowed(IsWithdrawAllowedRequest) returns (IsWithdrawAllowedResponse) {}
    rpc getNotificationTemplates(GetNotificationTemplatesRequest) returns (GetNotificationTemplatesResponse) {}
    rpc addNotificationTemplates(AddNotificationTemplatesRequest) returns (AddNotificationTemplatesResponse) {}
    rpc updateNotificationTemplates(UpdateNotificationTemplatesRequest) returns (UpdateNotificationTemplatesResponse) {}
    rpc removeNotificationTemplates(RemoveNotificationTemplatesRequest) returns (RemoveNotificationTemplatesResponse) {}
    rpc referals(ReferalsRequest) returns (ReferalsResponse) {}
    rpc referalStat(ReferalStatRequest) returns (ReferalStatResponse) {}
    rpc clientAffiliateToggle(ClientAffiliateToggleRequest) returns (ClientAffiliateToggleResponse) {}
    rpc getSignupFailureLogs(SignupFailureErrorRequest) returns (SignupFailureErrorResponse) {}
    rpc searchSignUpLogs(SignupFailureErrorRequest) returns (SignupFailureErrorResponse) {}
    
    rpc getActiveUsersData(ActiveUsersDataRequest) returns (ActiveUsersDataResponse) {}
    rpc createCashierAdjustment(CreateCashierAdjustmentRequest) returns (CreateCashierAdjustmentResponse) {}
    rpc searchAdjustmentUsersByUsername(SearchUserRequest) returns (SearchUserResult) {}
    rpc reservationBlackListedUser(ReservationBlackListedUserRequest) returns (ReservationBlackListedUserResponse) {}
    rpc reservationBlackListToggle(ReservationBlackListToggleRequest) returns (ReservationBlackListToggleResponse) {}
    rpc searchReservationBlackListByUsername(SearchUserRequest) returns (SearchUserResult) {}
    rpc createExcludedIdentity (CreateExcludedIdentityRequest) returns (CreateExcludedIdentityResponse) {};
    rpc searchExcludedUser (SearchExcludedUserRequest) returns (SearchExcludedUserResult) {};
    rpc getFailedBraintreeTransactions (FailedBraintreeTransactionsRequest) returns (FailedBraintreeTransactionsResponse) {};
    rpc updateBlockedUserReservationDelay(UpdateBlockedUserReservationDelayRequest) returns (UpdateBlockedUserReservationDelayResponse) {};
    rpc getTransactionIDsFromProcessingLogFees (TransactionIDsFromProcessingLogFeesRequest) returns (TransactionIDsFromProcessingLogFeesResponse) {};
    rpc getReservationBlackListedTournamentTemplates (ReservationBlackListedTournamentTemplatesRequest) returns (ReservationBlackListedTournamentTemplatesResponse) {};
    rpc updateReservationBlackListedTournamentTemplates (UpdateReservationBlackListedTournamentTemplatesRequest) returns (UpdateReservationBlackListedTournamentTemplatesResponse) {};
    rpc updateUserProfileInfo(UpdateUserProfileInfoRequest) returns (UpdateUserProfileInfoResponse) {};
    rpc getNotificationEmailLogs (NotificationEmailLogsRequest) returns (NotificationEmailLogsResponse){};
    rpc getSSNWhiteList (SSNWhitelistRequest) returns (SSNWhitelistResponse){};
    rpc updateSSNWhiteList (UpdateSSNWhitelistRequest) returns (UpdateSSNWhitelistResponse){};
    rpc enablePromoForAnyTournament (PromoRequest) returns (PromoResponse) {};
    rpc getTournamentStatus (TournamentStatusRequest) returns (TournamentStatusResponse) {};
    rpc getFailedReferralLogs (FailedReferralLogsRequest) returns (FailedReferralLogsResponse) {}
    rpc getLobbyVisibleTournamentList (GetLobbyVisibleTournamentListRequest) returns (GetLobbyVisibleTournamentListResponse) {};
    rpc updateLobbyVisibleTournamentOrder (UpdateLobbyVisibleTournamentOrderRequest) returns (UpdateLobbyVisibleTournamentOrderResponse) {};
    rpc disableWithdrawals (DisableWithdrawalRequest) returns (DisableWithdrawalResponse) {};
    rpc getDisabledWithdrawals (DisabledWithdrawalsRequest) returns (DisabledWithdrawalsResponse) {};
    rpc getVaultedPayment (VaultedPaymentRequest) returns (VaultedPaymentResponse) {};
    rpc orderLobbyTournamentsInMostPlayedOrder (OrderLobbyTournamentsInMostPlayedOrderRequest) returns (OrderLobbyTournamentsInMostPlayedOrderResponse) {};
    
    rpc updateTournamentReservationBlacklistSchedule(UpdateTournamentReservationBlacklistScheduleRequest) returns (UpdateTournamentReservationBlacklistScheduleResponse) {};
    rpc getTournamentReservationBlacklistSchedule(GetTournamentReservationBlacklistScheduleRequest) returns (GetTournamentReservationBlacklistScheduleResponse) {};
    
    rpc createPlayerSpecificGameMatching(CreatePlayerSpecificGameMatchingRequest) returns (CreatePlayerSpecificGameMatchingResponse) {}; 
    rpc getPlayerSpecificGameMatching(GetPlayerSpecificGameMatchingRequest) returns (GetPlayerSpecificGameMatchingResponse) {}; 
    rpc modifyPlayerSpecificGameMatching(ModifyPlayerSpecificGameMatchingRequest) returns (ModifyPlayerSpecificGameMatchingResponse) {};
    
    rpc byPassWithdrawalLimits (ByPassWithdrawalLimitsRequest) returns (ByPassWithdrawalLimitsResponse) {};
    rpc getUserNoWithdrawlRestrictions (UserWithNoWithdrawalRestrictionsRequest) returns (UserWithNoWithdrawalRestrictionsResponse) {};
    rpc sendEmailToMultipleUser (MultipleEmailSendRequest) returns (MultipleEmailSendResponse) {};
    rpc getWelcomeBackPromoLogs (WelcomeBackPromoLogsRequest) returns (WelcomeBackPromoLogsResponse) {};
    rpc verifyUserSSNAgain(VerifyUsersFirstFiveSSNDigitRequest) returns (VerifyUsersFirstFiveSSNDigitResponse) {};
    rpc deleteUserGeoLocation (DeleteUserGeoLocationRequest) returns (DeleteUSerGeoLocationResponse) {};
    rpc updatePoolAccountBalance(UpdatePoolAccountBalanceRequest) returns (UpdateAccountPoolBalanceResponse) {}
    rpc getPoolAccountBalance(GetPoolAccountBalanceRequest) returns (GetPoolAccountBalanceResponse) {}
    rpc getFreePlayPromoUsers(GetFreePlayPromoUsersRequest) returns (GetFreePlayPromoUsersResponse) {};
    rpc updateFreePlayPromoUsers(UpdateFreePlayPromoUsersRequest) returns (UpdateFreePlayPromoUsersResponse) {};
    rpc keyTransactionPayout(KeyTransactionPayouRequest) returns (KeyTransactionPayouResponse) {};
    
    rpc getAdminPagePermissions (GetPagePermissionsRequest) returns (GetPagePermissionsResponse) {};  
    rpc addAdminPagePermissions (AddAdminPagePermissionsRequest) returns (AddAdminPagePermissionsResponse) {};  
    rpc removeAdminPagePermissions (RemoveAdminPagePermissionsRequest) returns (RemoveAdminPagePermissionsResponse) {};  
    rpc getDistinctPage (AdminPageRequest) returns (DataResponse) {};  
    rpc getUsersWithDeviceToken(GetDeviceTokenUsersRequest) returns (GetDeviceTokenUsersResponse) {};
    rpc sendPushNotification(SendPushNotificationRequest) returns (SendPushotificationResponse);
    rpc addPushNotificationKey(AddPushNotificationKeyRequest) returns (AddPushNotificationKeyResponse);
    rpc getPushNotificationKey(ApiKeyRequest)returns (ApiKeyResponse) {};
    rpc removePushNotificationKey(ApiKeyRequest)returns (ApiKeyResponse) {};
    rpc addApnApiKey(ApiKeyRequest) returns (ApiKeyResponse);
    rpc getApnPushNotificationKey(ApiKeyRequest)returns (ApiKeyResponse) {};
    rpc removeapnPushNotificationKey(ApiKeyRequest) returns (ApiKeyResponse) {};
    rpc getPendingTransactions(GetPendingTransactionsRequest) returns (GetPendingTransactionsResponse) {};
    
    // rpc getRefundUsers(GetRefundUsersRequest) returns (GetRefundUsersResponse) {};
    // rpc addRefundUser(AddRefundUserRequest) returns (AddRefundUserResponse) {};
    // rpc updateRefundUser(UpdateRefundUserRequest) returns (UpdateRefundUserResponse) {};
    rpc getPromoQualificationData(promoQualificationDataRequest) returns (promoQualificationDataResponse) {};
    rpc getActiveStats( ActiveStatsRequest ) returns ( ActiveStatsResponse ) {};
    rpc getTemplateStats( TemplateStatsRequest ) returns ( TemplateStatsResponse ) {};
    rpc searchSuspendedDeviceByUserName(SearchSuspendedDeviceRequest) returns (SearchSuspendedDeviceResult) {}
    rpc unsuspendUserDevice(SearchSuspendedDeviceRequest) returns (SearchSuspendedDeviceResult) {}
    rpc suspendDeviceIdManually(SearchSuspendedDeviceRequest) returns (SearchSuspendedDeviceResult) {}
    rpc getJoinrequestTracker(JoinRequestStatsRequest) returns (JoinRequestStatsResponse) {}

    rpc getRoyalHands( GetRoyalHandsRequest ) returns ( GetRoyalHandsResponse ) {};
    rpc uploadTournamentImage (ImageRequest) returns (ImageResponse){};

    rpc updateClientForAffiliateData( UpdateClientForAffiliateRequest ) returns ( UpdateClientForAffiliateResponse ) {};
    rpc updateClientGroupForAffiliateData( UpdateClientGroupForAffiliateRequest ) returns ( UpdateClientGroupForAffiliateResponse ) {};
    rpc getReportsForAffiliateCopy( GetReportsForAffiliateCopyRequest ) returns ( GetReportsForAffiliateCopyResponse ) {};
    rpc updateReportsForAffiliateCopy( UpdateReportsForAffiliateCopyRequest ) returns ( UpdateReportsForAffiliateCopyResponse ) {};
    rpc whitelistUserEmail(WhitelistUserRequest) returns (WhitelistUserResult) {}
    rpc removeWhitelistedUserEmail(WhitelistUserRequest) returns (WhitelistUserResult) {}
    rpc getWhitelistedUserEmails(WhitelistedUsersRequest) returns (WhitelistedUsersResult) {}
    rpc getDuplicateUserForDeviceId (DuplicateUserForDeviceIdRequest) returns (DuplicateUserForDeviceIdResponse) {};
    rpc uploadDriverLicense (DriverLicenseImageRequest) returns (DriverLicenseImageResponse) {};
    rpc getDriversLicense (DriversLicenseRequest) returns (DriversLicenseResponse) {};
    rpc searchReservationQueueUsers(SearchUserRequest) returns (SearchUserResult) {}
    rpc blackListReservationQueueUsers(ReservationBlackListToggleRequest) returns (ReservationBlackListToggleResponse) {}
    rpc getPlaceholderUser(ReservationBlackListedUserRequest) returns (ReservationBlackListedUserResponse) {}
    rpc placeholderUserStatusToggle(ReservationBlackListToggleRequest) returns (ReservationBlackListToggleResponse) {}
    rpc searchPlaceholderPlayerByUsername(SearchUserRequest) returns (SearchUserResult) {}
    rpc searchPlaceholderAdjustments(SearchUserRequest) returns (SearchUserResult) {}

    rpc setGeofenceDeviceRule(GeofenceDeviceRuleRequest) returns (GeofenceDeviceRuleResponse) {}
    
    rpc uploadClientTournamentImage (ClientTournamentImageRequest) returns (ClientTournamentImageResponse) {};
    rpc getClientTournamentImage (ClientTournamentImageRequest) returns (ClientTournamentImageResponse) {};

    rpc getReservationDataList(SearchUserRequest) returns (SearchUserResult) {}

    rpc uploadClientGroupTournamentImage (ClientGroupTournamentImageRequest) returns (ClientTournamentImageResponse) {};
    rpc getClientGroupTournamentImage (ClientGroupTournamentImageRequest) returns (ClientTournamentImageResponse) {};
    rpc removeUserFromReservationQueue(ReservationBlackListToggleRequest) returns (ReservationBlackListToggleResponse) {}
    rpc uploadClientLogo (ClientLogoRequest) returns (ClientLogoResponse) {};
    rpc updateIgdpparPoolAdjustment(UpdatePoolAccountBalanceRequest) returns (UpdateAccountPoolBalanceResponse) {}
    rpc getIgdpparPoolAdjustment(GetPoolAccountBalanceRequest) returns (GetPoolAccountBalanceResponse) {}
    rpc manualAdjustmentByBatch(ManualAdjustmentByBatchRequest) returns (ManualAdjustmentByBatchResponse) {}
    rpc adjustBulkInstantDepositMatch (BulkInstantDepositMatchRequest) returns (BulkInstantDepositMatchResponse) {};
    rpc addClientEmail(AddClientEmailRequest) returns (AddClientEmailResponse) {}
    rpc getClientEmail(GetClientEmailRequest) returns (GetClientEmailResponse) {}
    rpc updateClientEmail(UpdateClientEmailRequest) returns (UpdateClientEmailResponse) {}
    rpc deleteClientEmail(DeleteClientEmailRequest) returns (DeleteClientEmailResponse) {}
    rpc getAllClientEmail(GetAllClientEmailRequest) returns (GetAllClientEmailResponse) {}
    rpc setTournamentAdditionalPayoutBoost(SetTournamentAdditionalPayoutBoostRequest) returns (SetTournamentAdditionalPayoutBoostResponse) {}
    rpc getTournamentAdditionalPayoutBoost(GetTournamentAdditionalPayoutBoostRequest) returns (GetTournamentAdditionalPayoutBoostResponse) {}
    rpc getTournamentAdditionalPayoutBoostsPerTemplate(GetTournamentAdditionalPayoutBoostRequest) returns (GetTournamentAdditionalPayoutBoostResponse) {}


    rpc getAdditionalPayoutForTournament(GetAdditionalPayoutDetailRequest) returns (GetAdditionalPayoutDetailResponse) {}
    rpc createAdditionalPayoutBoost(CreateAdditionalPayoutRequest) returns (CreateAdditionalPayoutResponse) {}

    rpc getAllBoostedAdditionalPayout(GetAllBoostedAdditionalPayoutRequest) returns (GetAllBoostedAdditionalPayoutResponse){}
    rpc updateBoostedAdditionalPayout(UpdateBoostedAdditionalPayoutRequest) returns (UpdateBoostedAdditionalPayoutResponse){}
    rpc getAdditionalPayoutById(GetAdditionalPayoutByIdRequest) returns (GetAdditionalPayoutByIdResponse){}

    rpc setBulkFreePlayAdjustment(SetBulkFreePlayAdjustmentRequest) returns (SetBulkFreePlayAdjustmentResponse){}
    rpc getUserExportData(GetUserExportDataRequest) returns (GetUserExportDataResponse){}
}

message SetBulkFreePlayAdjustmentRequest{
    string data = 1;
}
message SetBulkFreePlayAdjustmentResponse{
    string result = 1;
}

message GetAdditionalPayoutByIdRequest{
    string additional_payout_id = 1;
}
message GetAdditionalPayoutByIdResponse{
    string result = 1;
}

message SetTournamentAdditionalPayoutBoostRequest {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}

message GetAllClientEmailRequest {
}

message GetAllClientEmailResponse {
    string res = 1;
}

message AddClientEmailRequest {
    string client_id = 1;
    string email = 2;
}

message AddClientEmailResponse {
    string result = 1;
}

message GetClientEmailRequest {
    string client_id = 1;
}

message GetClientEmailResponse {
    string result = 1;
}

message UpdateClientEmailRequest {
    string client_id = 1;
    string email = 2;
}

message UpdateClientEmailResponse {
    string result = 1;
}

message DeleteClientEmailRequest {
    string client_id = 1;
}

message DeleteClientEmailResponse {
    string result = 1;
}

message SetTournamentAdditionalPayoutBoostResponse {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}

message GetTournamentAdditionalPayoutBoostRequest {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}

message GetTournamentAdditionalPayoutBoostResponse {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}

message GetAdditionalPayoutDetailRequest {
    string tournament_template_id = 1;
}

message GetAdditionalPayoutDetailResponse {
    string result = 1;
}
message CreateAdditionalPayoutRequest{
    string tournament_template_id = 1;
    string payout_structure = 2;
    bool is_boost = 3;
    string additional_payout_id=4;
    string boost_name = 5;
}

message GetAllBoostedAdditionalPayoutRequest{
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string boost_name = 3;
}

message GetAllBoostedAdditionalPayoutResponse {
    string result = 1;
}
message UpdateBoostedAdditionalPayoutRequest{
    string additional_payout_id = 1;
    string payout_structure = 2;
    string boost_name = 3;
}

message UpdateBoostedAdditionalPayoutResponse {
    string result = 1;
}

message CreateAdditionalPayoutResponse{
    string result = 1;
}


message ManualAdjustmentByBatchRequest {
    string user_id = 1;
    string reason = 2; 
    string amount = 3; 
    string currency = 4; 
    string all_data = 5; 
}

message ManualAdjustmentByBatchResponse {
    string message = 1;
}

message BulkInstantDepositMatchRequest {
    string user_ids = 1;
    string client_id = 2;
    string deposit_amount = 3;
    string deposit_match_amount = 4;
    string max_allowed = 5;
    string currency_type = 6;
}

message BulkInstantDepositMatchResponse {
    string data = 1;
}

message ClientLogoRequest {
    string client_id = 1;
    string image = 2;
}

message ClientLogoResponse {
    string data = 1;
}

message ClientGroupTournamentImageRequest {
    string image = 1;
    string group_id = 2;
    string type = 3;
    string tournament_id= 4;
}

message ClientTournamentImageRequest {
    string image = 1;
    string client_id = 2;
    string type = 3;
    string tournament_id= 4;
}

message ClientTournamentImageResponse {
    string data = 1;
}
message DuplicateUserForDeviceIdRequest {
    string username = 1;
    string suspended = 2;
    string device_id = 3;
    string pagination_current_page = 4;
    string pagination_items_per_page = 5;
}

message DriversLicenseRequest {
    string user_id = 1;
}

message DriversLicenseResponse {
    string data = 1;
}

message DriverLicenseImageRequest{
    string user_id = 1;
    string image = 2;
}

message DriverLicenseImageResponse {
    string data = 1;
}

message DuplicateUserForDeviceIdResponse {
    string data = 1;
}

message GeofenceDeviceRuleRequest {
    string geofence_id = 1;
    bool is_devices_banned = 2;
    bool is_email_blocked = 3;
}

message GeofenceDeviceRuleResponse {
    string result = 1;
}


message ImageRequest {
    string id = 1;
    string image = 2;
    string type = 3;
}

message ImageResponse {
    string data = 1;
}


message UpdateReportsForAffiliateCopyRequest {
    string id = 1;
    string status = 2;
    string data = 3;
}

message UpdateReportsForAffiliateCopyResponse {
    string data = 1;
}

message GetReportsForAffiliateCopyRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string other = 3;
}

message GetReportsForAffiliateCopyResponse {
    string data = 1;
}

message UpdateClientGroupForAffiliateRequest {
    string client_id = 1;
    string status = 2;
    string data = 3;
}

message UpdateClientGroupForAffiliateResponse {
    string data = 1;
}

message UpdateClientForAffiliateRequest {
    string client_id = 1;
    string status = 2;
    string data = 3;
}

message UpdateClientForAffiliateResponse {
    string data = 1;

}

message GetRoyalHandsRequest {
    string page_number = 1;
    string item_per_page = 2;
    string date = 3;
    string type = 4;
}

message GetRoyalHandsResponse {
    string data = 1;
}

message JoinRequestStatsRequest {
    string start_date = 1;
    string end_date = 2;
    string type = 3;
    string pagination_current_page = 4;
    string pagination_items_per_page = 5;
}

message JoinRequestStatsResponse {
    string data = 1;
}

message SearchSuspendedDeviceRequest {
    string username = 1;
    string suspended = 2;
    string deviceid = 3;
    string pagination_current_page = 4;
    string pagination_items_per_page = 5;
}

message SearchSuspendedDeviceResult {
    string data = 1;
}

// message UpdateRefundUserRequest{
//     string user_id = 1; 
//     string date_created = 2; 
//     bool auto_refund = 3; 
//     bool issue_credit = 4;
//     bool is_promo_user = 5; 
//     double amount = 6; 
//     double playthrough =7; 
//     string refund_type = 8; 

// }
// message UpdateRefundUserResponse{
//     bool success = 1;
// }

// message AddRefundUserRequest{
//     string user_id = 1; 
//     string date_created = 2; 
//     bool auto_refund = 3; 
//     bool issue_credit = 4;
//     bool is_promo_user = 5; 
//     double amount = 6; 
//     double playthrough =7; 
//     string refund_type = 8; 

// }
// message AddRefundUserResponse{
//     bool success = 1;
// }

// message GetRefundUsersRequest{
//     string page_number = 1;
//     string item_per_page = 2;
//     string data = 3;
// }
// message GetRefundUsersResponse{
//     string data = 1;
// }

message ActiveStatsRequest {
    string page_number = 1;
    string item_per_page = 2;
    string date = 3;
}

message ActiveStatsResponse {
    string data = 1;
}

message TemplateStatsRequest {
    string page_number = 1;
    string item_per_page = 2;
    string start_date = 3;
    string end_date = 4;
    string type = 5;
    string username = 6;
}

message TemplateStatsResponse {
    string data = 1;
}

message promoQualificationDataRequest {
    string query = 1;
}

message promoQualificationDataResponse {
    string data = 1;
}

message GetPendingTransactionsRequest{
    string page_number = 1;
    string item_per_page = 2;
    string data = 3;
    string key = 4;
}

message GetPendingTransactionsResponse{
    string out = 1;
}

message AddPushNotificationKeyRequest{
    string client_id = 1;
    string key = 2;
}

message AddPushNotificationKeyResponse{
    string status = 1;
    string data = 2;
}

message GetDeviceTokenUsersResponse{
    string status = 1;
    string data = 2;
}

message GetDeviceTokenUsersRequest{
    string page_number = 1;
    string item_per_page = 2;
    string data = 3;
}

message SendPushNotificationRequest {
    string title = 1;
    string message = 2;
    string token_id = 3;
    string data = 4;
  }
  
message SendPushotificationResponse {
    string result = 1;
  }

message KeyTransactionPayouRequest {
    string transaction_id = 1;
}
message KeyTransactionPayouResponse {
    string status = 1;
    string data = 2;
}
message GetPoolAccountBalanceRequest {  
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;  
} 
message GetPoolAccountBalanceResponse {
    string data = 1;
}
message UpdatePoolAccountBalanceRequest {
    double amount = 1;
    string memo = 2;
} 
message UpdateAccountPoolBalanceResponse{
    bool success = 1;
}

message GetFreePlayPromoUsersRequest{
    string page_number = 1;
    string item_per_page = 2;
    string data = 3;
}
message GetFreePlayPromoUsersResponse{
    string status = 1;
    string data = 2;
}

message UpdateFreePlayPromoUsersRequest{
    string user_id = 1;
    string data = 2;
}
message UpdateFreePlayPromoUsersResponse{
    string status = 1;
    string data = 2;
}

message VerifyUsersFirstFiveSSNDigitRequest{
    string first_five_ssn_digit = 1;    
}
message VerifyUsersFirstFiveSSNDigitResponse {
    bool success = 1;
}

message WelcomeBackPromoLogsRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2; 
    string total_count = 3;
}

message WelcomeBackPromoLogsResponse {
    string data = 1;
}
message MultipleEmailSendRequest {
    string template_name = 1;
    string data = 2;
}
message MultipleEmailSendResponse{
    bool success = 1;
}

message UserWithNoWithdrawalRestrictionsRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2; 
}

message UserWithNoWithdrawalRestrictionsResponse {
    string data = 1;
}

message ByPassWithdrawalLimitsRequest {
    string username = 1;
    string name  = 2;
    string email = 3;
    string status = 4;
    string user_id = 5;
}

message ByPassWithdrawalLimitsResponse {
    bool success = 1; 
}

message AdminPageRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
}

message RemoveAdminPagePermissionsRequest {
    string id = 1;
    string admin_id = 2;
    string page =3;
}

message RemoveAdminPagePermissionsResponse {
    string result = 1;
}

message AddAdminPagePermissionsRequest {
    string id = 1;
    string admin_id = 2;
    string page =3;
}

message AddAdminPagePermissionsResponse {
    string result = 1;
}


message GetPagePermissionsRequest {
    string id = 1;
    string admin_id = 2;
    string page =3;
}

message GetPagePermissionsResponse {
    string data = 1;
}

message CreatePlayerSpecificGameMatchingRequest {
    int32 number_of_players = 1;
    string player_id = 2;
    string matched_players = 3;
    string status = 4;
}

message CreatePlayerSpecificGameMatchingResponse {
    string result = 1;
}

message GetPlayerSpecificGameMatchingRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
    string user_id = 3;
}

message GetPlayerSpecificGameMatchingResponse {
    string result = 1;
}

message ModifyPlayerSpecificGameMatchingRequest {
    string id = 1;
    string player_id = 2;
    string status = 3;
    string action = 4;
}

message ModifyPlayerSpecificGameMatchingResponse {
    string result = 1;
}
message OrderLobbyTournamentsInMostPlayedOrderRequest {
    string evaluation_length = 1;
}

message OrderLobbyTournamentsInMostPlayedOrderResponse {
    string result = 1;

}

message GetTournamentReservationBlacklistScheduleRequest{
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string tournament_id = 3;
}

message GetTournamentReservationBlacklistScheduleResponse{
    string result = 1;
}

message UpdateTournamentReservationBlacklistScheduleRequest{
    string tournament_id = 1;
    string start_time = 2;
    string end_time = 3;
    string action = 4;
    string schedule_id = 5;
    bool on_off_interval = 6;
    string enable_interval = 7;
    string disable_interval = 8;
}

message UpdateTournamentReservationBlacklistScheduleResponse{
    string result = 1;
}

message VaultedPaymentRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string startDate = 3;
    string endDate = 4;
    string cursor = 5;
}


message VaultedPaymentResponse {
    string data = 1;
}

message DisableWithdrawalRequest {
    string username = 1;
    string name  = 2;
    string email = 3;
    string disable_type = 4;
    string user_id = 5;
    string action = 6;
}

message DisableWithdrawalResponse {
    bool success = 1; 
}


message DisabledWithdrawalsRequest {
    string username = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3; 
}

message DisabledWithdrawalsResponse {
    string data = 1;
}

message TournamentStatusRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2; 
}

message TournamentStatusResponse {
    string data = 1;

}

message FailedReferralLogsRequest{
    string phrase = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3;
}

message FailedReferralLogsResponse{
    string result = 1;
}

message GetLobbyVisibleTournamentListRequest{
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
}

message GetLobbyVisibleTournamentListResponse{
    string result = 1;
}

message UpdateLobbyVisibleTournamentOrderRequest{
    string tournament_id = 1;
    string order_value = 2;
}

message UpdateLobbyVisibleTournamentOrderResponse{
    string result = 1;
}

message PromoRequest {
    string user_id = 1;
    bool isPromo = 2;
}

message PromoResponse {
    bool success = 1; 
}

message SSNWhitelistRequest {
    string ssn = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3;
}

message SSNWhitelistResponse {
    string data = 1;
}

message UpdateSSNWhitelistRequest {
    string id = 1;
    string ssn = 2;
    string action = 3;
}

message UpdateSSNWhitelistResponse {
    string data = 1;
}

message NotificationEmailLogsRequest {
    string id = 1;
    string user_id = 2;
    string recipient = 3;
    string notification_template_name = 4;
    string created_date = 5;
    string pagination_current_page = 6;
    string pagination_items_per_page = 7;
    string username = 8;
}

message NotificationEmailLogsResponse {
    string data = 1;
}

message UpdateUserProfileInfoRequest {
    string email = 1;
    string phone = 2;
    string user_id = 3;
    string name = 4;
}

message UpdateUserProfileInfoResponse {
    string result = 1;
}

message ReservationBlackListedTournamentTemplatesRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2; 
}

message ReservationBlackListedTournamentTemplatesResponse {
    string data = 1;
}

message UpdateReservationBlackListedTournamentTemplatesRequest {
    string tournament_template_id = 1;
    string status = 2;
}

message UpdateReservationBlackListedTournamentTemplatesResponse {
    bool success = 1; 
}

message TransactionIDsFromProcessingLogFeesRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string startDate = 3;
    string endDate = 4;
    string status = 5;
}
message TransactionIDsFromProcessingLogFeesResponse {
    string data = 1;
}
message FailedBraintreeTransactionsRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string startDate = 3;
    string endDate = 4;
    string cursor = 5;
}

message FailedBraintreeTransactionsResponse {
    string data = 1;
}

message UpdateBlockedUserReservationDelayRequest {
    string user_id = 1;
    string data = 2;
}

message UpdateBlockedUserReservationDelayResponse {
    bool success = 1;
}

message CreateExcludedIdentityRequest {
    string system = 1;
    string firstName = 2;
    string lastName = 3;
    string dateOfBirth = 4;
    string lastKnownAddress = 5;
    string otherInformation = 6;
    string details = 7;
    string aliases = 8;
    string status = 9;
}

message CreateExcludedIdentityResponse {
    bool success = 1;
}

message SearchExcludedUserRequest {
    string firstName = 1;
    string lastName = 2;
    string pagination_current_page = 3;
    string pagination_items_per_page = 4;
}

message SearchExcludedUserResult {
    string data = 1;
}

message ReservationBlackListToggleRequest{
    string user_id = 1;
    string type = 2;
}

message CreateCashierAdjustmentRequest {
    string currency = 1;
    string amount = 2;
    string game_session_id = 3;
    string table_id = 4;
    string tournament_id = 5;
    string reason = 6;
    string user_id = 7;
    string playthrough_requirement=8;
    string expiration_dates = 9;
}


message CreateCashierAdjustmentResponse {
    string result = 1;
}

message ReservationBlackListToggleResponse{
    bool success = 1;
}
message ReservationBlackListedUserRequest{
    string page_number = 1;
    string item_per_page = 2;
}
message ReservationBlackListedUserResponse{
    string data = 1;
    
}
message ActiveUsersDataRequest {
    string start_time = 1;
    string end_time = 2;
    string mobile_auth_id = 3;
    string auth_status = 4;
}

message ActiveUsersDataResponse {
    string result = 3;
}

message SignupFailureErrorRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string search_input = 3;
}


message SignupFailureErrorResponse {
    string response = 1;
}
message ClientAffiliateToggleRequest {
    string is_for_affiliate = 1;
}
message ClientAffiliateToggleResponse {
    bool succes = 1;
}
message ReferalStatRequest{
    string user_id = 1;
}

message ReferalStatResponse {
    string result = 1;
    bool has_redeemed = 2;
    bool success = 3;
}

message ReferalsRequest{
    string referer_id = 1;
    string refered_email = 2;

}

message ReferalsResponse {
    string result = 1;
}

message GetStatusRequest{
    string tournament_instance_id = 1;
}

message GetStatusResult{
    string tournament_instance_id = 1;
    string game_meta = 2;
    string game = 3;
    repeated PlayerStatus players = 4;
    string action_result = 5;
    string tournament = 6;
    string rankings = 7;
}

message PlayerStatus {
    string user_id = 1;
    string meta = 2;
    string name = 3;
    string username = 4;
    string chair = 5;
    string chips = 6;
    string is_my_turn = 7;
    string my_turn_start_time = 8;
    string md5 = 9;
    string cards = 10;
    string can_draw = 12;
    string rank = 13;
    string prize_payout = 14;
    string additional_prize_payout = 15;
    string additiona_prize_payout_percentage = 16;
    string addons_used = 17;
    string should_show_prize_revealer = 18;
    string hand_description = 19;
}

message MakeSngRequest{
    string tournament_id = 1;
    string table_type = 2;
    string small_blind_value = 3;
    string table_timer = 4;
    string game_type = 5;
}

message MakeSngResponse {
    string result = 1;
}

message MakePlayerActionRequest{
    string tournament_instance_id = 1;
    string table_instance_id = 2;
    string action = 3;
    int32 bet = 4;
    string latest_rtt = 5;
    string is_auto = 6;
}

message GetTournamentsRequest {
    bool user_only = 1;
    bool is_for_money = 2;
    repeated string buyin_low = 3;
    repeated string buyin_high = 4;
    repeated string status = 5; // 'registering' | 'running' | 'finished'
    repeated string timer_low = 6; 
    repeated string timer_high = 7;
    repeated string limits = 8; //  'fixed' | 'pot_limit' | 'none'
    repeated string openings = 9;   // 'one_open' | 'all_open' | 'all_occupied'
    repeated string search_text = 10;   // search target.name or target.id
    repeated string game_type = 11; // 'texas_holdem' | 'omaha' | 'five_card_stud' | 'five_card_draw'    
    string pagination_curr_page = 12;
    string pagination_items_per_page = 13;
    bool all_tournaments = 14;
    bool simulation_only = 15;
    repeated string entry_fee_low = 16;
    repeated string entry_fee_high = 17; 

}

message GetTournamentsResponse {
    string result = 1;
}

message JoinTournamentRequest {
    string tournament_instance_id = 1;
    int32 addons_amount = 2;
}

message JoinTournamentResponse {
    string result = 1;
}

message UnregisterTournamentRequest {
    string tournament_instance_id = 1;
}

message UnregisterTournamentResponse {
    string result = 1;
}

message CancelTournamentRequest {
    string tournament_instance_id = 1;
}

message CancelTournamentResponse {
    string result = 1;
}

message GetHandHistoryRequest {
    string gameplay_history_id = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3;
}

message GetHandHistoryResponse {
    string result = 1; 
}

message GetGameplayHistoriesRequest {
    string tournament_instance_id = 1;
    string pagination_current_page = 8;
    string pagination_items_per_page = 9;
}

message GetGameplayHistoriesResponse {
    string result = 1;
}

message DrawAddActionRequest {
    string draw_num = 1;
}

message DrawReplaceActionRequest {
    string user_id = 1;
    string tournament_instance_id = 2;
    string table_instance_id = 3;
    string latest_rtt = 4;
    // explicitly state that player don't want to draw
    bool skip_draw = 5;
    // indexes of player cards field which the player wants to discard and replace with new drawn cards
    repeated string change_idxs = 6;
}

message DrawActionResponse {

}
//create multiple users request message
message CreateMultipleUsersRequest {
    string number_of_users = 1;
}
//create multiple users result message
message CreateMultipleUsersResult {
    bool success = 1;
}
// Singup request message
message SignupRequest {
    string username = 1;
    string email = 2;
    string password = 3;
    string first_name = 4;
    string last_name = 5;
    string address = 6;
    string city = 7;
    string state = 8;
    string zip = 9;
    string ssn = 10;
    string id_number = 11;
    string id_state = 12;
    string date_of_birth = 13;
    string question1 = 14;
    string answer1 = 15;
    string question2 = 16;
    string answer2 = 17;
    string user_rewards_id = 18;
    string phone = 19;
    string geolocation_data = 20;  
    string client = 21;  
}

// Signup response message
message SignupResult {
    bool success = 1;
    repeated string errors = 2;
}

// Login request message
message LoginRequest {
    string user_name = 1;
    string password = 2;
    string device_id = 3;
    string remote_ip = 4;
    map<string, string> extra_headers = 5;
    string geolocation_data = 6;    // same format as GeolocationRequest.data field
    string client = 7;

}

// Login response message
message LoginResult {
    string access_token = 1;
    string user_id = 2;
    string login_data = 3;
    bool is_admin = 4;
}

// Logout request message
message LogoutRequest {
    string remote_ip = 1;
    map<string, string> extra_headers = 2;
}

// Logout response message
message LogoutResult {
    bool success = 1;
    repeated string errors = 2;
}

message MakeSngWithRandomUsersRequest{
    string user_id = 1;
}

message GetUserByEmailRequest{
    string email = 1;
}

message GetUserByEmailResponse{
    string id = 1;
    string name = 2;
    string username = 3;
    string cash_in_account = 4;
}

message TableSubscribeRequest {
    string table_instance_id = 1;
}
message TableSubscribeResponse {
    string table_state_id = 1;
}

message JoinTournamentTemplateRequest {
    string tournament_template_id = 1;
    string tournament_template_name = 2;
    int32 addons_amount = 3;
    string tournament_batch_id = 4;
}

message JoinTournamentTemplateResponse {
    string result = 1;
}

message UnsubscribeFromTournamentTemplateBufferRequest {
    string tournament_template_id = 1;
}

message UnsubscribeFromTournamentTemplateBufferResponse {
    string result = 1;
}

message AddTournamentTemplateToLobbyRequest {
    string tournament_template_id = 1;
    bool is_visible_in_lobby = 2;
    bool is_flash_mode = 3;
    bool is_single_hand = 4;
    bool has_additional_payout = 5;

    // For Five Card Draw Only
    bool is_turbo_mode = 6;
}

message AddTournamentTemplateToLobbyResponse {
    string result = 1;
}

message RemoveTournamentTemplateFromLobbyRequest {
    string tournament_template_id = 1;
}

message RemoveTournamentTemplateFromLobbyResponse {
    string result = 1;
}

message GetTournamentTemplateDetailRequest {
    string tournament_template_id = 1;
}

message GetTournamentTemplateDetailResponse {
    string tournament_template_id = 1;
    string tournament_tempalte_detail = 2;
    string waiting_users = 3;
}

message CreateTournamentTemplateRequest{
    string buyin = 1;
    string buyin_chips = 2;
    string min_prize_pool_value = 3;
    string rake = 4;
    string is_for_money = 5;
    string rebuys_permitted = 6;
    string addons_permitted = 7;
    string addon_threshold = 8;
    string rebuys_round_start = 9;
    string rebuys_round_end = 10;
    string addons_round_start = 11;
    string addons_round_end = 12;
    string scheduled_breaks = 13;
    string time_limit_seconds = 14;
    string pending_timeout_seconds = 15;
    string min_players_per_table = 16;
    string max_players_per_table = 17;
    string blind_level_and_values =  18;
    string small_blind_max_value = 19;
    string table_timer = 20;
    string tour_players_min = 21;
    string tour_players_max = 22;
    string type = 23;
    string blinds_increase_interval_seconds = 24;
    string blinds_increase_interval_rounds = 25;
    string table_type = 26;
    string table_max_num_raises = 27;
    string rebalancing_table_algorithm = 28;
    string status = 29;
    string use_decimals = 30;
    string name = 31;
    string game_type = 32;
    string flash_prize_pool_values = 33;
    string additional_prize_pool_payout_id = 34;
    string additional_payout_player = 35;
    string prize_pool_payout_id = 36;
    string use_additional_payout_only = 37;
    string addon_chips = 38;
    string unique_deck = 39;
    string instant_payout = 40;
    string tournament_image = 41;
    string wildcards_enabled = 42;
    string wildcard_value = 43;
    string chips_in_penny = 44;
    string pair_mixed_addon_players = 45;
    string hard_cap_enabled = 46;
    string new_flash_mode = 47;
    string username_privacy = 48;
    string reveal_cards_after_action = 49;
    string enable_additional_payout = 50;
    string enable_additional_payout_multiplier = 51;
    string force_allin_flash_mode = 52;
    string draw_and_replace_activated = 53;
    string tournament_active_image = 54;
    string middle_active_image = 55;
    string tournament_waiting_image = 56;
    string upload_full_image = 57;
    string number_of_recent_active_users = 58;
    string active_players_in_last_x_seconds = 59;
}
message CreateTournamentTemplateResponse {
    bool success = 1;
}

message GetTournamentTemplateListRequest { 
    string filter = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3;
}

message GetTournamentTemplateListResponse {
    string result = 1;
}

message GetTournamentTemplateBufferStateRequest {
    string tournament_template_id = 1;
}

message GetTournamentTemplateBufferStateResponse {
    string result = 1;
}

message GetLobbyTournamentTemplateListRequest { 
    repeated string status = 1;
    repeated string buyin_low = 2;
    repeated string buyin_high = 3;
    repeated string timer_low = 4; 
    repeated string timer_high = 5;
    // 'Fixed' | 'Pot_limit' | 'None'
    repeated string limits = 6;
    // 'Texas_holdem' | 'Omaha' | 'Five_card_stud' | 'Five_card_draw'    
    repeated string game_type = 7; 
    string pagination_current_page = 8;
    string pagination_items_per_page = 9;
    repeated string entry_fee_low = 10;
    repeated string entry_fee_high = 11; 

}

message GetLobbyTournamentTemplateListResponse {
    string result = 1;
}

message LaunchTournamentRequest {
    string tournament_template_ids_and_name = 1;
}

message LaunchTournamentResponse {
    string result = 1;
}

message MakeDepositRequest {
    string nonce = 1;   // optional: braintree client nonce token
    string customer_id = 2; // optional: braintree associated customer id
    string device_data = 3;  // optional: braintree client device data
    double amount = 4;
    bool is_transaction_fee = 5;

}

message MakeDepositResponse {
    bool success = 1;
}

message MakeWithdrawalRequest {
    string nonce = 1;
    string customer_id = 2; // optional: braintree client nonce token
    string device_data = 3; // optional: braintree associated customer id
    double amount = 4;  // optional: braintree client device data
}

message MakeWithdrawalResponse {
    bool success = 1;
}

message AccountStatementsRequest {
    string start_date = 1;
    string end_date = 2;
}

message AccountStatementsResponse {
    string adjustments = 1;
    string sessions = 2;
    string deposits = 3;
    string withdrawals = 4;
    string pending_deposits = 5;
    string transactions = 6;

}

// payment service messages
message ClientTokenRequest {
    string customer_id = 1; // optional: braintree associated customer id
}

message ClientTokenResponse {
    string token = 1;   // client token needed to create braintree client sdk UI
}

message VaultPaymentMethodRequest {
    string nonce = 1;
}

message VaultPaymentMethodResponse {
    bool success = 1;
}

message CaptureDepositRequest {
    string transaction_id = 1;  // braintree transaction id that can be used to verify transaction
    bool is_id_from_graphql_api = 2;   // whether transaction id found from braintree graphql api
}

message CaptureDepositResponse {
    bool success = 1;
    string res = 2;
}

message CaptureWithdrawalRequest {
    string transaction_id = 1;  // braintree transaction id that can be used to verify transaction
    bool is_id_from_graphql_api = 2;  // whether transaction id found from braintree graphql api
    string deposit_type = 3;    // 'PayPal' | 'ApplePay' | 'CreditCard' | 'ACH' | 'Venmo'
    // in case of 'CreditCard' deposit_type, institution should be specific credit card brand like mastercard, visa 
    // in case of 'ACH' deposit_type, institution should be specific US bank name
    // in case of 'PayPal', 'ApplePay', 'Venmo'  deposit_type, institution should be the same as the deposit_type
    string institution = 4;   
    // in case of 'CreditCard' and 'ACH' deposit_type, account_number should be last 4 digit of bank account number or credit card number
    // in case of 'PayPal', 'ApplePay', 'Venmo' deposit_type, account_number should be id of the payment account  
    string account_number = 5;
    // in case of 'ACH' deposit_type, routing_number should be specific US bank routing number
    // in case of other payments, routing_number should be 'N/A'
    string routing_number = 6;
}

message CaptureWithdrawalResponse {
    bool success = 1;
}

message GeolocationRequest {
    // this field should be in the form of:
    // {
    //     "data": {
    //         "location": {
    //             "result": {
    //                 "latitude": "",
    //                 "longitude": ""
    //             }
    //         },
    //         "device": {
    //             "result": {
    //                 "platform": "web|android|ios"
    //             }
    //         },
    //         "version": {
    //             "result": {
    //                 "version": "25_0"
    //             }
    //         },
    //         "root": {
    //             "result": {
    //                 "root1": false, //android field
    //                 "root2": false, //android field
    //                 "battery": "{"isPlugged:":false}", //android field
    //                 "bash": false, //ios field
    //                 "cydia_app": false, //ios field
    //                 "cydia_package": false, //ios field
    //                 "battery_state": "UNPLUGGED" //ios field
    //             }
    //         }
    //     }
    // }
    string data = 1;
}

message GeolocationResult {
    bool success = 1;
    repeated string errors = 2;
}

message AddPayoutStructureRequest {
    repeated PayoutOptions payouts = 1;
}

message PayoutOptions {
    string num_players_min = 1;
    string num_players_max = 2;
    string percentages = 3;
}

message AddPayoutStructureResponse {
    string result = 1; 
}

message GetPayoutStructureRequest {
    string filter = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3;
}

message GetPayoutStructureResponse {
    string result = 1;
}

message ChangePasswordRequest {
    string current_password = 1;
    string new_password = 2;
}

message ChangePasswordResponse {
    string result = 1;
}

message GetRankingsRequest{
    string tournament_instance_id = 1;
}

message GetRankingsResult{
    string tournament_instance_id = 1;
    string payout_details = 2;
    string total_payout = 3;
}

message SearchUserRequest {
    string username = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3;
}

message SearchUserResult {
    string data = 1;
}

message WhitelistUserRequest {
    string id = 1;
}

message WhitelistUserResult {
    bool success = 1;
    repeated string errors = 2;
}

message AcceptTOSRequest {
    
}

message AcceptTOSResult {
    bool success = 1;
    repeated string errors = 2;
}

message AccountUpdatesRequest {

}

message AccountUpdatesResult {
    string data = 1;
}


message WhitelistedUsersRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string email = 3;
}

message WhitelistedUsersResult {
    string data = 1;
}

message TournamentDetailsRequest{
    string tournament_instance_id = 1;
}

message TournamentDetailsResponse{
    string tournament_instance_id = 1;
    string tournament_details = 2;
    repeated PlayerStatus players = 3;
}

message PlayerAccountBalanceRequest {
    string tournament_instance_id = 1;
}

message PlayerAccountBalanceResult {
    double cash_in_account = 1;
    double points_in_account = 2;
    string gameplay_balance = 3;

}

message NextTournamentRequest {
    string tournament_instance_id = 1;
}

message NextTournamentResult {
    string tournament_instance_id = 1;
}

message JoinAnyTournamentRequest {
    int32 limit = 1;
    string game_type = 2;
    string game_mode = 3;
}

message JoinAnyTournamentAdminRequest {
    int32 limit = 1;
    string game_type = 2;
    string game_mode = 3;
    string user_id = 4;
    bool isPromo = 5;
}

message JoinAnyTournamentResult {
    string result = 1;   
}

message UnregisterAnyTournamentRequest {
    
}

message UnregisterAnyTournamentResult {
    bool status = 1;
    repeated string errors = 2;

}


message JoinAnyTournamentStatusRequest {

}

message JoinAnyTournamentStatusResult {
    bool active = 1;
    int32 tournaments_left = 2;
    int32 total_tournaments = 3;
    string join_any_status = 4;
    string join_any_status_message = 5;
    string join_any_game_type = 6;
    string join_any_game_mode = 7;
}

message ActiveJoinAnyTournamentsRequest {

}

message ActiveJoinAnyTournamentsResult {
    string data = 1;
}

message JoinAnyUsersListRequest {
    string username = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3;
}

message JoinAnyUsersListResult {
    string data = 1;
}

message CancelJoinAnyTournamentRequest {
    string user_id = 1;
}

message CancelJoinAnyTournamentResult {
    bool status = 1;
    repeated string errors = 2;

}

message CancelJoinAnyUsersRequest {
    repeated string user_ids = 1;
}

message CancelJoinAnyUsersResult {
    bool status = 1;
    repeated string errors = 2;
}

message CancelTournamentsRequest {
    repeated string tournament_instance_ids = 1;
}

message CancelTournamentsResponse {
    string result = 1;
}

message AddonPlayerRequest {
    string tournament_instance_id = 1;
}

message AddonPlayerResponse {
    string result = 1;
}

message PrizeRevealRequest {
    string tournament_instance_id = 1;
}

message PrizeRevealResponse {
    string result = 1;
}
message GeofenceRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
}

message GeofenceResponse {
    string data = 1;
}

message GeofenceAddRequest {
    string name = 1;
    string geofence_data = 2;
}

message GeofenceAddResponse {
    string result = 1;
}

message GeofenceUpdateRequest {
    string id = 1;
    string name = 2;
    string geofence_data = 3;
    bool is_active = 4;
}

message GeofenceUpdateResponse {
    string result = 1;
}

message GeofenceRemoveRequest {
    string geofence_id = 1;
}

message GeofenceRemoveResponse {
    string result = 1;
}

message GeofenceWhitelistRequest {
    string  geofence_id = 1;
    repeated string whitelist_ids = 2;
}

message GeofenceWhitelistResponse {
    string result = 1;
}

message GeofenceBlacklistRequest {
    string geofence_id = 1;
    repeated string blacklist_ids = 2;
}

message GeofenceBlacklistResponse {
    string result = 1;
}

message GeofenceUsersRequest {
    string geofence_id = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3;
}

message GeofenceUsersResponse {
    string data = 1;
}

message GeofenceGlobalRuleRequest {
    string geofence_id = 1;
    bool blacklist_all = 2;
}

message GeofenceGlobalRuleResponse {
    string result = 1;
}

//rank hands requests
message RankHandsRequest {
    string player_hands = 1;
    string table_cards = 2;
    bool additional_checks = 3;
    int32 wildcard_value = 4;

}
//rank hands result
message RankHandsResult {
    string success = 1;
}

message NewDeckRequest {
    string newDeck = 1;
}

message NewDeckResponse {
    string deck = 1;
}

message UpdateAccountBalanceRequest {
    string user_id = 1;
    double cash_amount = 2;
    double points_amount = 3;
    string update_message = 4;
}

message UpdateAccountBalanceResponse {
    string user_id = 1;
    double new_cash_in_account = 2;
    double new_points_in_account = 3;
    string message = 4;
}

message GetUserInfoRequest {}

message GetUserInfoResponse {
    string first_name = 1;
    string last_name = 2;
    string email = 3;
    string address = 4;
    string date_of_birth = 5;
    string phone = 6;
    string user_rewards_id = 7;
    double processing_fee_percentage = 8;
    double processing_fee_value = 9;
    double check_processing_fee_percentage = 10;
    double check_processing_fee_value = 11;
    double witdrawal_processing_fee_percentage = 12;
    double withdrawal_processing_fee_value = 13;
    string image = 14;
}

message GlobalSettingsRequest {
    string key = 1;
    string json_encoded_value = 2;
}

message GlobalSettingsResponse {
    string result = 1;
}

message UpdateUserInfoRequest {
    string email = 1;
    string phone = 2;
    string user_rewards_id = 3;
}

message UpdateUserInfoResponse {
    string status = 1;
}

message GetPasswordResetLinkRequest {
    string email = 1;
}

message GetPasswordResetLinkResponse {
    string status = 1;
}

message FetchSecurityQuestionsRequest {
    string username = 1;
}

message FetchSecurityQuestionsResponse {
    string questions = 1;
}

message ResetPasswordRequest {
    string username = 1;
    string answers = 2;
    string new_password = 3;
    string confirm_password = 4; 
}

message ResetPasswordResponse {
    string status = 1;
}

message VerifyUserPasswordRequest {
    string password = 1;
}

message VerifyUserPasswordResponse {
    string status = 1;
}

message ValidateSecurityQuestionsRequest {
    string user_name = 1;
    string answers = 2;
    string device_id = 3;
    string remote_ip = 4;
    map<string, string> extra_headers = 5;
    string geolocation_data = 6;    // same format as GeolocationRequest.data field}
}

message ValidateSecurityQuestionsResponse {
    string access_token = 1;
    string user_id = 2;
    string login_data = 3;
    bool is_admin = 4;
}

message IsEmailAvailableRequest {
    string email = 1;
}

message IsEmailAvailableResponse {
    bool available = 1;
}

message StartTournamentTableInstanceRequest{
    string tournament_instance_id = 1;
    string addons = 2;
}

message StartTournamentTableInstanceResponse{
    string success = 1;
}

message TournamentPayoutStructureResponse{
    string structure = 1;
}


message WhitelistedClientsRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
}

message WhitelistedClientsResult {
    string data = 1;
}



message GeofenceUserGlobalRuleRequest {
    string geofence_id = 1;
    bool blacklist_all = 2;
}

message GeofenceUserGlobalRuleResponse {
    string result = 1;
}

message GeofenceClientsRequest {
    string geofence_id = 1;
    string pagination_current_page = 2;
    string pagination_items_per_page = 3;
}

message GeofenceClientsResponse {
    string data = 1;
}

message GeofenceClientGlobalRuleRequest {
    string geofence_id = 1;
    bool blacklist_all = 2;
}

message GeofenceClientGlobalRuleResponse {
    string result = 1;
}

message ActiveUsersRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string username = 3;

}

message ActiveUsersResult {
    string data = 1;
}




message ClientRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
}

message ClientResponse {
    string data = 1;
}

message ClientAddRequest {
    string name = 1;
    string other_data = 2;
}

message ClientAddResponse {
    string result = 1;
}
message GroupedClientRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;  
}

message GroupedClientResponse {
    string data = 1;
}
message GroupClientAddRequest{
    repeated string grouped_client_data = 1;
}
message GroupClientAddResponse{
    string result = 1;
}
message GroupedClientUpdateRequest {
    string id = 1;
    repeated string grouped_client_data = 2;
}
message GroupedClientUpdateResponse {
    string result = 1;
}
message GroupedClientRemoveRequest {
    string grouped_client_id = 1;
}
message GroupedClientRemoveResponse{
    string result = 1;
}
message ClientUpdateRequest {
    string id = 1;
    string name = 2;
    string other_data = 3;
}

message ClientUpdateResponse {
    string result = 1;
}

message ClientRemoveRequest {
    string client_id = 1;
}

message ClientRemoveResponse {
    string result = 1;
}
message DataResponse {
    string data = 1;
}

message StatusResponse {
    string result = 1;
}



message ComponentPermissionRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
    string component = 3;
}
message ComponentPermissionAddRequest {
    string component = 1;
    string roles = 2;
}

message ComponentPermissionUpdateRequest {
    string id = 1;
    string component = 2;
    string roles = 3;
}


message ComponentPermissionRemoveRequest {
    string id = 1;
}




message AdminRoleRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
}

message AdminRoleAddRequest {
    string admin_id = 1;
    string role = 2;
}

message AdminRoleUpdateRequest {
    string id = 1;
    string admin_id = 2;
    string role = 3;
}

message AdminRoleRemoveRequest {
    string admin_id = 1;
    string role = 2;
}



message AdminAddRequest {
    string name = 1;
    string username = 2;
    string email = 3;
    string password = 4;
    
}

message AdminUpdateRequest {
    string id = 1;
    string name = 2;
    string username = 3;
    string email = 4;
    string password = 5;

}

message AdminRemoveRequest {
    string id = 1;
}


message UpdateTournamentTemplateRequest{
    string buyin = 1;
    string buyin_chips = 2;
    string min_prize_pool_value = 3;
    string rake = 4;
    string is_for_money = 5;
    string rebuys_permitted = 6;
    string addons_permitted = 7;
    string addon_threshold = 8;
    string rebuys_round_start = 9;
    string rebuys_round_end = 10;
    string addons_round_start = 11;
    string addons_round_end = 12;
    string scheduled_breaks = 13;
    string time_limit_seconds = 14;
    string pending_timeout_seconds = 15;
    string min_players_per_table = 16;
    string max_players_per_table = 17;
    string blind_level_and_values =  18;
    string small_blind_max_value = 19;
    string table_timer = 20;
    string tour_players_min = 21;
    string tour_players_max = 22;
    string type = 23;
    string blinds_increase_interval_seconds = 24;
    string blinds_increase_interval_rounds = 25;
    string table_type = 26;
    string table_max_num_raises = 27;
    string rebalancing_table_algorithm = 28;
    string status = 29;
    string use_decimals = 30;
    string name = 31;
    string game_type = 32;
    string flash_prize_pool_values = 33;
    string additional_prize_pool_payout_id = 34;
    string additional_payout_player = 35;
    string prize_pool_payout_id = 36;
    string use_additional_payout_only = 37;
    string addon_chips = 38;
    string unique_deck = 39;
    string instant_payout = 40;
    string tournament_template_id = 41;
    string tournament_image = 42;
    string wildcards_enabled = 43;
    string wildcard_value = 44;
    string chips_in_penny = 45;
    string pair_mixed_addon_players = 46;
    string hard_cap_enabled = 47;
    string new_flash_mode = 48;
    string username_privacy = 49;
    string reveal_cards_after_action = 50;
    string enable_additional_payout = 51;
    string enable_additional_payout_multiplier = 52;
    string force_allin_flash_mode = 53;
    string draw_and_replace_activated = 54;
    string tournament_active_image = 55;
    string middle_active_image = 56;
    string tournament_waiting_image = 57;
    string upload_full_image = 58;
    string number_of_recent_active_users = 59;
    string active_players_in_last_x_seconds = 60;
}

message PlayerTournamentRequest {
    repeated string search_text = 1;   // search target.name or target.id
    repeated string game_type = 2; 
    string pagination_curr_page = 3;
    string pagination_items_per_page = 4;
}

message WildHandRequest {
    repeated string hand = 1;
    string wildcard = 2;
}

message WildHandResponse {
    string data = 1;
}

message CompareWildHandRequest {
    repeated WildHand hands = 1;
    string wildcard = 2;
}

message WildHand {
    repeated string hand = 1;
}
message SimulateGamesRequest {
    string tournament_template_id = 1;
    string tournament_limit = 2;
    string addons_amount = 3;
    string no_of_players = 4;
    string is_single_hand = 5;
    string is_flash_mode = 6;
    string is_turbo_mode = 7;
    string has_additional_payout = 8;

}

message PendingDepositRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
}

message UpdatePendingRequest {
    string cashier_request_id = 1;
    string action = 2;
}

message DeletePrizePoolStatusRequest {
    string prize_pool_payout_id = 1;
}

message DeletePrizePoolStatusResponse {
    bool success = 1;
    string message = 2;
}


message AdminJoinAnyTournamentRequest {
    int32 limit = 1;
    string user_id = 2;
    
}

message UiSettingsRequest {
    string key = 1;
}
message AllUiSettingsRequest {
    string json_encoded_data = 1;
}
message UiSettingsResponse {
    string result = 1;
}

message ThemesRequest {
    string name = 1;
    string json_encoded_value = 2;
}
message EditThemesRequest {
    string name = 1;
    string json_encoded_value = 2;
    string id = 3;
}

message ThemesResponse {
    string result = 1;
}

message TemplateEditorRequest {
    bool basic_pool = 1;
    bool prize_pool = 2;
    bool additional_prize_pool = 3;
    bool flash_prize_pool = 4;
    bool blind_pool = 5;
    bool additional_payout_pool = 6;
    bool is_for_money = 7;
    bool use_decimals = 8;
    bool flash_mode = 9;
    bool chips_in_penny = 10;
    bool pair_players_with_dt_addons = 11;
    bool enable_wildcards = 12;
    bool enable_username_privacy = 13;
    bool enable_hard_cap = 14;
    bool use_unique_deck = 15;
    bool instant_payout = 16;
    bool reveal_opponents_card_after_action = 17;
    bool draw_and_replace_activated = 18;
    bool royal_flush = 19;
    bool straight_flush = 20;
    bool four_of_a_kind = 21;
    bool four_aces_with = 22;
    bool four_aces = 23;
    bool four_fives_through = 24;
    bool four_2s_3s_4s = 25;
    bool four_two_threes = 26;
    bool full_house = 27;
    bool flush = 28;
    bool straight = 29;
    bool three_of_a_kind = 30;
    bool two_pair = 31;
    bool jacks_or_better = 32; 
    bool pair = 33;
    bool one_jack_or_better = 34; 
    bool high_card = 35;
    bool game_tp =36;
    bool table_tp =37;
    bool update_b = 38;
    bool duplicate_b = 39;
    bool single_hand_b = 40;
    bool four_aces_with_5tok = 41;
    bool four_twos_threes_or_fours_with_5tok = 42;
    bool royal_flush_with_joker = 43;
    bool royal_flush_with_duece = 44;
    bool wild_royal_flush = 45;
    bool straight_flush_no_duece = 46;
    bool five_six_through_king = 47;
    bool five_threes_fours_or_fives = 48;
    bool five_aces = 49;
    bool four_jokers = 50;
    bool five_of_a_kind = 51;
    bool four_aces_with_black_jack = 52;
    bool four_aces_or_8 = 53;
    bool four_sevens = 54;
    bool four_aces_with_duece = 55;
    bool four_threes_thru_king_with_ace_or_duece = 56;
    bool four_fives_thru_king_with_black_jack = 57;
    bool four_jacks_with_ace = 58;
    bool four_fives_thru_king_qk = 59;    
    bool pair_nines_or_better = 60;
    bool pair_aces = 61;
    bool pair_jack_thru_ace = 62;
    bool pair_nine_ten = 63;
    bool pair_king_or_better = 64;
    bool aqk10_all_red_or_black = 65;
    bool four_dueces_with_aces = 66;    
    bool two_pair_dueces_with_jack_or_better =67;
    bool four_aces_in_row = 68;
    bool four_234s_in_row = 69;
    bool five_dueces=70;
    bool four_aces_with_face = 71;
    bool four_others_with_ace = 72;
    bool four_jack_thru_king = 73;
    bool four_jack_thru_king_with_face = 74;
    bool four_jack_thru_king_with_jack_or_better = 75;
    bool four_dueces = 76;
    bool four_threes_thru_king = 77;
    bool four_twos_threes_or_fours_with_black_jack = 78;
    bool two_pair_king_high = 79;
}

message TemplateEditorResponse {
    string result = 1;
}

message GeopollRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
    string session_data_id = 3;
    string ip_address = 4;
}

message GeopollResponse {
    string data = 1;
}

message PurgeGeopollRequest {
    
}

message PurgeGeopollResponse {
    bool success = 1;
}

message PlayerMailingAddressRequest {
    string id = 1;
}

message PlayerMailingAddressUpdateRequest {
    string id = 1;
    string nickname = 2;
    string address = 3;
    string address_2 = 4;
    string zip = 5;
    string city = 6;
    string state = 7;
    string phone = 8;
}

message PlayerMailingAddressResponse {
    string id = 1;
    string nickname = 2;
    string address = 3;
    string address_2 = 4;
    string zip = 5;
    string city = 6;
    string state = 7;
    string phone = 8;
    bool default = 9;
}
message PlayerMailingAddressStatusResponse {
    string status = 1;
    repeated string errors = 2;
}

message PlayerMailingAddressesResponse {
    repeated PlayerMailingAddressResponse addresses = 1;
}


message UpdateSecurityQuestionsRequest {
    string password = 1;
    string question1 = 2;
    string answer1 = 3;
    string question2 = 4;
    string answer2 = 5;
}

message UpdateSecurityQuestionsResponse {
    bool success = 1;
}


message CustomCssRequest {
    string data = 1;
}

message CustomCssResponse {
    bool success = 1;
    string data = 2;
}

message AnswerVerifyPasswordRequest {
    string security_question_id = 1;
    string security_question_answer = 2;
    string password = 3;
}

message AnswerVerifyPasswordResponse {
    bool success = 1;
}

message VerifySSNLastFourRequest {
    string last_four_digits = 1;
    string password = 2;
}

message VerifySSNLastFourResponse {
    bool success = 1;
} 

message FloatResponse {
    double data = 1;
}

message UploadPageExtensionRequest { 
    string file = 1;
}

message UploadPageExtensionResponse {
    bool success = 1;
    string message = 2;
}

message GetPageExtensionsRequest{}

message GetPageExtensionsResponse{
    string extensions = 1;
}

message DeletePageExtensionRequest {
    string extension_id = 1;  
    string file_name = 2;  
}

message DeletePageExtensionResponse {
    bool success = 1;  
}

message ExtractPageExtensionRequest {
    string extension_id = 1;  
    string file_name = 2;  
}

message ExtractPageExtensionResponse {
    bool success = 1;  
}

message UploadWorksheetReportRequest {
    string file = 1; 
}

message UploadWorksheetReportResponse {
    bool success = 1;
    string message = 2;
}

message GetWorksheetsAndReportsRequest{}

message GetWorksheetsAndReportsResponse{
    string worksheets_reports = 1;
}

message ChangeDisplayNameForExtensionsRequest{
    string id = 1;
    string display_name = 2;
}

message ChangeDisplayNameForExtensionsResponse{
    string success = 1;
}

message ChangeDisplayNameForReportsRequest{
    string id = 1;
    string display_name = 2;
}

message ChangeDisplayNameForReportsResponse{
    string success = 1;
}

message ChangeStatusOfWorksheetReportRequest {
    string id = 1;
    int32 value = 2;
}

message ChangeStatusOfWorksheetReportResponse{
    string success = 1;
}

message DeleteWorksheetOrReportRequest {
    string file_id = 1;  
    string file_name = 2;  
    string type = 3;
}

message DeleteWorksheetOrReportResponse {
    bool success = 1;  
}

message BufferRequest {
    string tournament_template_id = 1;  
}

message BufferResponse {
    bool success = 1;  
}

message AdjustmentRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
    string start_date = 3;
    string end_date = 4;
}

message SessionsRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
    string start_date = 3;
    string end_date = 4;
}

message DepositsRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
    string start_date = 3;
    string end_date = 4;
}

message PendingDepositsRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
    string start_date = 3;
    string end_date = 4;
}

message WithdrawalsRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
    string start_date = 3;
    string end_date = 4;
}

message TransactionsRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
    string start_date = 3;
    string end_date = 4;
}

message GamePlayStatusForUserPerTableRequest {
    string table_id = 1;
    string Tab_id = 2;
}

message GamePlayStatusForUserPerTableResponse{
    string result = 1;
}

message CancelAnySimulatedGamesRequest {
    string Simulation_tournament_template_id = 1;
}

message CancelAnySimulatedGamesResponse {
    string result = 1 ;
}

message GetCancelTournamentListRequest {
    repeated string buyin_low = 1;
    repeated string buyin_high = 2;
    repeated string status = 3; // 'registering' | 'running' | 'finished'
    repeated string limits = 4; //  'fixed' | 'pot_limit' | 'none'
    repeated string search_text = 5;   // search target.name or target.id
    repeated string game_type = 6; // 'texas_holdem' | 'omaha' | 'five_card_stud' | 'five_card_draw'    
    string pagination_curr_page = 7;
    string pagination_items_per_page = 8;
    bool simulation_only = 9;
    repeated string entry_fee_low = 10;
    repeated string entry_fee_high = 11; 
    repeated string timer_low = 12; 
    repeated string timer_high = 13;
}

message GetCancelTournamentListResponse {
    string result = 1;
}

message CheckWithdrawalRequest {
    double amount = 1;
}

message CheckWithdrawalResponse {
    bool success = 1;
}

message GetWithdrawalPendingRequest {
    string pagination_curr_page = 1;
    string pagination_items_per_page = 2;
}
message GetWithdrawalPendingResponse {
    string sucess = 1;
}

message ActionPendingWithdrawaRequest {
    string user_id = 1;
    string action = 2;
    string amount = 3;
    string transaction_id = 4;
}

message ActionPendingWithdrawaResponse {
    string response = 1;
}

message LabelEditorRequest {
    string label_name = 1;
    string label_type = 2;
    string type = 3;
}

message LabelEditorResponse {
    string response = 1;
    string label_type= 2;
}

message ApiKeyRequest {
    string target = 1;
    string target_id = 2;
}

message ApiKeyResponse {
    string response = 1;
}

message AddRecuringDepositRequest{
    string minimum_balance_threshold = 1;
    string recharge_threshold_amount = 2;
    bool enable_recuring_payment = 3;
}

message AddRecuringDepositResponse{
    string response = 1;
}

message UpdateRecuringDepositRequest{
    string minimum_balance_threshold = 1;
    string recharge_threshold_amount = 2;
}

message UpdateRecuringDepositResponse{
    string response = 1;
}

message ToggleRecuringDepositRequest{
    bool enable_recuring_payment = 1;
}

message ToggleRecuringDepositResponse{
    string response = 1;
}

message GetCustomerIDRequest {

}
message GetCustomerIDResponse {
    string response = 1;
}

message DeletePaymentMethodRequest {
    string payment_method_token = 1;
}

message DeletePaymentMethodResponse {
    string response = 1;
}

message SetDefaultPaymentMethodRequest {
    string payment_method_token = 1;
    string customer_id = 2;
}

message SetDefaultPaymentMethodResponse {
    string response = 1;
}

message ConfirmTransferAmountsRequest {
    string amount1 = 1;
    string amount2 = 2;
    string verification_id_from_paymentMethod = 3;
}

message ConfirmTransferAmountsResponse {
    string response = 1;
}
message MobilePaymentRequest {
    string customer_id = 1;
    string method_type = 2;
    string nonce = 3;
}

message MobilePaymentResponse {
    string response = 1;
}

message UpdatePaymentMethodRequest{
    string token = 1;
}

message UpdatePaymentMethodResponse{
    string response = 1;
}

message GetRecuringDepositRequest{
}

message GetRecuringDepositResponse{
    string response = 1;
}

message MakeTransactionRequest {
    string payment_method_nonce = 1;
    string amount = 2;
    string a_customer_id = 3;
    string payment_method_token = 4;
}

message MakeTransactionResponse {
    string response = 1;
}

message UploadToS3Request {
    string file = 1;
}

message UploadToS3Response {
    bool success = 1;
    string message = 2;
}

message MountHashesRequest {
    int32 flag = 1;
}

message MountHashesResponse {
    bool success = 1;
    string message = 2;
}

message SetReservationTimeEditorRequest {
    string data = 1;
}

message SetReservationTimeEditorResponse {
    string response = 1;
}

message GetReservationTimeEditorRequest {
}

message GetReservationTimeEditorResponse {
    string data = 1;
}

message SetTournamentReservationTimeRequest {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}

message SetTournamentReservationTimeResponse {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}

message RemoveTournamentReservationTimeRequest {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}

message RemoveTournamentReservationTimeResponse {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}

message GetTournamentReservationTimeRequest {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}
message GetTournamentReservationTimeResponse {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}
message CreateTournamentReservationTimeRequest {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}
message CreateTournamentReservationTimeResponse {
    string data = 1;
    string tourn_id = 2;
    string response = 3;
}
message IsWithdrawAllowedRequest{
    string user_id = 1;
    string withdraw_amount = 2;
    string payment_method = 3;
}

message IsWithdrawAllowedResponse{
    bool isWithdrawAllowed = 1;
}
message GetNotificationTemplatesRequest {
    string pagination_current_page = 1;
    string pagination_items_per_page = 2;
}
message GetNotificationTemplatesResponse {
    string data = 1;
}
message AddNotificationTemplatesRequest {
    string language = 1;
    string name = 2;
    string title = 3;
    string body = 4;
    bool is_active = 5;
}
message AddNotificationTemplatesResponse {
    string res = 1;
}
message UpdateNotificationTemplatesRequest {
    string language = 1;
    string name = 2;
    string title = 3;
    string body = 4;
    string id = 5;
    bool is_active = 6;
}
message UpdateNotificationTemplatesResponse {
    string res = 1;
}
message RemoveNotificationTemplatesRequest {
    string id = 1;
}
message RemoveNotificationTemplatesResponse {
    string res = 1;
}

// delete user jeo location session data
message DeleteUserGeoLocationRequest {
    string user_id = 1;
}

message DeleteUSerGeoLocationResponse {
    bool success = 1;
    string message = 2;
}

message GetUserExportDataRequest {}

message GetUserExportDataResponse {
    bool success = 1;
    string data = 2;
}